# Generated from Mapper.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,57,386,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,1,0,1,0,1,1,1,1,
        1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,
        1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,
        1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,
        11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,
        14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,
        19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,
        21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,
        23,1,23,1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,
        25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,
        27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,
        30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,
        32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,
        35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,39,1,
        39,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,44,1,44,1,
        45,1,45,1,45,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,
        49,1,49,1,49,1,49,1,50,4,50,328,8,50,11,50,12,50,329,1,51,1,51,1,
        51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,341,8,51,1,52,4,52,344,8,52,
        11,52,12,52,345,1,53,1,53,5,53,350,8,53,10,53,12,53,353,9,53,1,54,
        4,54,356,8,54,11,54,12,54,357,1,54,1,54,1,55,1,55,1,55,1,55,5,55,
        366,8,55,10,55,12,55,369,9,55,1,55,1,55,1,56,1,56,1,56,1,56,5,56,
        377,8,56,10,56,12,56,380,9,56,1,56,1,56,1,56,1,56,1,56,1,378,0,57,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
        49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,
        71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,
        93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,
        113,57,1,0,5,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,
        95,97,122,3,0,9,10,13,13,32,32,2,0,10,10,13,13,392,0,1,1,0,0,0,0,
        3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
        1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
        1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,
        1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,
        1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,
        1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,
        1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,
        0,113,1,0,0,0,1,115,1,0,0,0,3,117,1,0,0,0,5,119,1,0,0,0,7,125,1,
        0,0,0,9,132,1,0,0,0,11,137,1,0,0,0,13,143,1,0,0,0,15,148,1,0,0,0,
        17,153,1,0,0,0,19,162,1,0,0,0,21,164,1,0,0,0,23,166,1,0,0,0,25,168,
        1,0,0,0,27,175,1,0,0,0,29,178,1,0,0,0,31,181,1,0,0,0,33,184,1,0,
        0,0,35,187,1,0,0,0,37,189,1,0,0,0,39,191,1,0,0,0,41,196,1,0,0,0,
        43,202,1,0,0,0,45,206,1,0,0,0,47,213,1,0,0,0,49,223,1,0,0,0,51,225,
        1,0,0,0,53,234,1,0,0,0,55,239,1,0,0,0,57,246,1,0,0,0,59,254,1,0,
        0,0,61,257,1,0,0,0,63,262,1,0,0,0,65,267,1,0,0,0,67,273,1,0,0,0,
        69,279,1,0,0,0,71,283,1,0,0,0,73,285,1,0,0,0,75,288,1,0,0,0,77,293,
        1,0,0,0,79,295,1,0,0,0,81,297,1,0,0,0,83,299,1,0,0,0,85,302,1,0,
        0,0,87,305,1,0,0,0,89,307,1,0,0,0,91,309,1,0,0,0,93,312,1,0,0,0,
        95,315,1,0,0,0,97,319,1,0,0,0,99,322,1,0,0,0,101,327,1,0,0,0,103,
        340,1,0,0,0,105,343,1,0,0,0,107,347,1,0,0,0,109,355,1,0,0,0,111,
        361,1,0,0,0,113,372,1,0,0,0,115,116,5,123,0,0,116,2,1,0,0,0,117,
        118,5,125,0,0,118,4,1,0,0,0,119,120,5,112,0,0,120,121,5,114,0,0,
        121,122,5,105,0,0,122,123,5,110,0,0,123,124,5,116,0,0,124,6,1,0,
        0,0,125,126,5,110,0,0,126,127,5,117,0,0,127,128,5,109,0,0,128,129,
        5,98,0,0,129,130,5,101,0,0,130,131,5,114,0,0,131,8,1,0,0,0,132,133,
        5,116,0,0,133,134,5,105,0,0,134,135,5,108,0,0,135,136,5,101,0,0,
        136,10,1,0,0,0,137,138,5,98,0,0,138,139,5,108,0,0,139,140,5,101,
        0,0,140,141,5,110,0,0,141,142,5,100,0,0,142,12,1,0,0,0,143,144,5,
        98,0,0,144,145,5,111,0,0,145,146,5,111,0,0,146,147,5,108,0,0,147,
        14,1,0,0,0,148,149,5,118,0,0,149,150,5,111,0,0,150,151,5,105,0,0,
        151,152,5,100,0,0,152,16,1,0,0,0,153,154,5,102,0,0,154,155,5,117,
        0,0,155,156,5,110,0,0,156,157,5,99,0,0,157,158,5,116,0,0,158,159,
        5,105,0,0,159,160,5,111,0,0,160,161,5,110,0,0,161,18,1,0,0,0,162,
        163,5,40,0,0,163,20,1,0,0,0,164,165,5,44,0,0,165,22,1,0,0,0,166,
        167,5,41,0,0,167,24,1,0,0,0,168,169,5,114,0,0,169,170,5,101,0,0,
        170,171,5,116,0,0,171,172,5,117,0,0,172,173,5,114,0,0,173,174,5,
        110,0,0,174,26,1,0,0,0,175,176,5,43,0,0,176,177,5,43,0,0,177,28,
        1,0,0,0,178,179,5,45,0,0,179,180,5,45,0,0,180,30,1,0,0,0,181,182,
        5,43,0,0,182,183,5,61,0,0,183,32,1,0,0,0,184,185,5,45,0,0,185,186,
        5,61,0,0,186,34,1,0,0,0,187,188,5,43,0,0,188,36,1,0,0,0,189,190,
        5,61,0,0,190,38,1,0,0,0,191,192,5,114,0,0,192,193,5,111,0,0,193,
        194,5,97,0,0,194,195,5,100,0,0,195,40,1,0,0,0,196,197,5,115,0,0,
        197,198,5,116,0,0,198,199,5,97,0,0,199,200,5,114,0,0,200,201,5,116,
        0,0,201,42,1,0,0,0,202,203,5,101,0,0,203,204,5,110,0,0,204,205,5,
        100,0,0,205,44,1,0,0,0,206,207,5,99,0,0,207,208,5,105,0,0,208,209,
        5,114,0,0,209,210,5,99,0,0,210,211,5,108,0,0,211,212,5,101,0,0,212,
        46,1,0,0,0,213,214,5,114,0,0,214,215,5,101,0,0,215,216,5,99,0,0,
        216,217,5,116,0,0,217,218,5,97,0,0,218,219,5,110,0,0,219,220,5,103,
        0,0,220,221,5,108,0,0,221,222,5,101,0,0,222,48,1,0,0,0,223,224,5,
        37,0,0,224,50,1,0,0,0,225,226,5,100,0,0,226,227,5,114,0,0,227,228,
        5,97,0,0,228,229,5,119,0,0,229,230,5,82,0,0,230,231,5,111,0,0,231,
        232,5,97,0,0,232,233,5,100,0,0,233,52,1,0,0,0,234,235,5,100,0,0,
        235,236,5,114,0,0,236,237,5,97,0,0,237,238,5,119,0,0,238,54,1,0,
        0,0,239,240,5,114,0,0,240,241,5,97,0,0,241,242,5,100,0,0,242,243,
        5,105,0,0,243,244,5,117,0,0,244,245,5,115,0,0,245,56,1,0,0,0,246,
        247,5,112,0,0,247,248,5,111,0,0,248,249,5,105,0,0,249,250,5,110,
        0,0,250,251,5,116,0,0,251,252,5,101,0,0,252,253,5,114,0,0,253,58,
        1,0,0,0,254,255,5,117,0,0,255,256,5,112,0,0,256,60,1,0,0,0,257,258,
        5,100,0,0,258,259,5,111,0,0,259,260,5,119,0,0,260,261,5,110,0,0,
        261,62,1,0,0,0,262,263,5,108,0,0,263,264,5,101,0,0,264,265,5,102,
        0,0,265,266,5,116,0,0,266,64,1,0,0,0,267,268,5,114,0,0,268,269,5,
        105,0,0,269,270,5,103,0,0,270,271,5,104,0,0,271,272,5,116,0,0,272,
        66,1,0,0,0,273,274,5,119,0,0,274,275,5,104,0,0,275,276,5,105,0,0,
        276,277,5,108,0,0,277,278,5,101,0,0,278,68,1,0,0,0,279,280,5,102,
        0,0,280,281,5,111,0,0,281,282,5,114,0,0,282,70,1,0,0,0,283,284,5,
        59,0,0,284,72,1,0,0,0,285,286,5,105,0,0,286,287,5,102,0,0,287,74,
        1,0,0,0,288,289,5,101,0,0,289,290,5,108,0,0,290,291,5,115,0,0,291,
        292,5,101,0,0,292,76,1,0,0,0,293,294,5,45,0,0,294,78,1,0,0,0,295,
        296,5,42,0,0,296,80,1,0,0,0,297,298,5,47,0,0,298,82,1,0,0,0,299,
        300,5,61,0,0,300,301,5,61,0,0,301,84,1,0,0,0,302,303,5,33,0,0,303,
        304,5,61,0,0,304,86,1,0,0,0,305,306,5,62,0,0,306,88,1,0,0,0,307,
        308,5,60,0,0,308,90,1,0,0,0,309,310,5,62,0,0,310,311,5,61,0,0,311,
        92,1,0,0,0,312,313,5,60,0,0,313,314,5,61,0,0,314,94,1,0,0,0,315,
        316,5,97,0,0,316,317,5,110,0,0,317,318,5,100,0,0,318,96,1,0,0,0,
        319,320,5,111,0,0,320,321,5,114,0,0,321,98,1,0,0,0,322,323,5,110,
        0,0,323,324,5,111,0,0,324,325,5,116,0,0,325,100,1,0,0,0,326,328,
        7,0,0,0,327,326,1,0,0,0,328,329,1,0,0,0,329,327,1,0,0,0,329,330,
        1,0,0,0,330,102,1,0,0,0,331,332,5,116,0,0,332,333,5,114,0,0,333,
        334,5,117,0,0,334,341,5,101,0,0,335,336,5,102,0,0,336,337,5,97,0,
        0,337,338,5,108,0,0,338,339,5,115,0,0,339,341,5,101,0,0,340,331,
        1,0,0,0,340,335,1,0,0,0,341,104,1,0,0,0,342,344,5,58,0,0,343,342,
        1,0,0,0,344,345,1,0,0,0,345,343,1,0,0,0,345,346,1,0,0,0,346,106,
        1,0,0,0,347,351,7,1,0,0,348,350,7,2,0,0,349,348,1,0,0,0,350,353,
        1,0,0,0,351,349,1,0,0,0,351,352,1,0,0,0,352,108,1,0,0,0,353,351,
        1,0,0,0,354,356,7,3,0,0,355,354,1,0,0,0,356,357,1,0,0,0,357,355,
        1,0,0,0,357,358,1,0,0,0,358,359,1,0,0,0,359,360,6,54,0,0,360,110,
        1,0,0,0,361,362,5,47,0,0,362,363,5,47,0,0,363,367,1,0,0,0,364,366,
        8,4,0,0,365,364,1,0,0,0,366,369,1,0,0,0,367,365,1,0,0,0,367,368,
        1,0,0,0,368,370,1,0,0,0,369,367,1,0,0,0,370,371,6,55,0,0,371,112,
        1,0,0,0,372,373,5,47,0,0,373,374,5,42,0,0,374,378,1,0,0,0,375,377,
        9,0,0,0,376,375,1,0,0,0,377,380,1,0,0,0,378,379,1,0,0,0,378,376,
        1,0,0,0,379,381,1,0,0,0,380,378,1,0,0,0,381,382,5,42,0,0,382,383,
        5,47,0,0,383,384,1,0,0,0,384,385,6,56,0,0,385,114,1,0,0,0,8,0,329,
        340,345,351,357,367,378,1,6,0,0
    ]

class MapperLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    T__40 = 41
    T__41 = 42
    T__42 = 43
    T__43 = 44
    T__44 = 45
    T__45 = 46
    T__46 = 47
    AND = 48
    OR = 49
    NOT = 50
    INT = 51
    BOOL = 52
    SCOPE = 53
    IDENTIFIER = 54
    WS = 55
    SINGLE_LINE_COMMENT = 56
    MULTI_LINE_COMMENT = 57

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'{'", "'}'", "'print'", "'number'", "'tile'", "'blend'", "'bool'", 
            "'void'", "'function'", "'('", "','", "')'", "'return'", "'++'", 
            "'--'", "'+='", "'-='", "'+'", "'='", "'road'", "'start'", "'end'", 
            "'circle'", "'rectangle'", "'%'", "'drawRoad'", "'draw'", "'radius'", 
            "'pointer'", "'up'", "'down'", "'left'", "'right'", "'while'", 
            "'for'", "';'", "'if'", "'else'", "'-'", "'*'", "'/'", "'=='", 
            "'!='", "'>'", "'<'", "'>='", "'<='", "'and'", "'or'", "'not'" ]

    symbolicNames = [ "<INVALID>",
            "AND", "OR", "NOT", "INT", "BOOL", "SCOPE", "IDENTIFIER", "WS", 
            "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "T__39", "T__40", "T__41", "T__42", "T__43", 
                  "T__44", "T__45", "T__46", "AND", "OR", "NOT", "INT", 
                  "BOOL", "SCOPE", "IDENTIFIER", "WS", "SINGLE_LINE_COMMENT", 
                  "MULTI_LINE_COMMENT" ]

    grammarFileName = "Mapper.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


