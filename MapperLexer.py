# Generated from Mapper.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,52,342,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,1,
        0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,
        3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,
        11,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,16,1,
        16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,
        19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,
        21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,
        23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,
        25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,
        27,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,
        30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,
        32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,
        35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,
        40,1,41,1,41,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,45,1,45,5,
        45,296,8,45,10,45,12,45,299,9,45,1,46,4,46,302,8,46,11,46,12,46,
        303,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,315,8,47,1,
        48,1,48,5,48,319,8,48,10,48,12,48,322,9,48,1,48,1,48,1,49,4,49,327,
        8,49,11,49,12,49,328,1,49,1,49,1,50,1,50,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,320,0,52,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
        20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,
        31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,
        42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,
        1,0,4,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,
        57,3,0,9,10,13,13,32,32,346,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
        0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
        17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
        27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,
        37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,
        47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,
        57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,
        67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,
        77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,
        87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,
        97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,1,105,1,0,0,
        0,3,107,1,0,0,0,5,113,1,0,0,0,7,120,1,0,0,0,9,125,1,0,0,0,11,131,
        1,0,0,0,13,140,1,0,0,0,15,142,1,0,0,0,17,144,1,0,0,0,19,146,1,0,
        0,0,21,148,1,0,0,0,23,150,1,0,0,0,25,153,1,0,0,0,27,156,1,0,0,0,
        29,159,1,0,0,0,31,162,1,0,0,0,33,164,1,0,0,0,35,166,1,0,0,0,37,171,
        1,0,0,0,39,176,1,0,0,0,41,182,1,0,0,0,43,186,1,0,0,0,45,193,1,0,
        0,0,47,203,1,0,0,0,49,205,1,0,0,0,51,214,1,0,0,0,53,219,1,0,0,0,
        55,226,1,0,0,0,57,234,1,0,0,0,59,237,1,0,0,0,61,242,1,0,0,0,63,247,
        1,0,0,0,65,253,1,0,0,0,67,259,1,0,0,0,69,263,1,0,0,0,71,266,1,0,
        0,0,73,271,1,0,0,0,75,273,1,0,0,0,77,275,1,0,0,0,79,277,1,0,0,0,
        81,280,1,0,0,0,83,283,1,0,0,0,85,285,1,0,0,0,87,287,1,0,0,0,89,290,
        1,0,0,0,91,293,1,0,0,0,93,301,1,0,0,0,95,314,1,0,0,0,97,316,1,0,
        0,0,99,326,1,0,0,0,101,332,1,0,0,0,103,334,1,0,0,0,105,106,5,59,
        0,0,106,2,1,0,0,0,107,108,5,112,0,0,108,109,5,114,0,0,109,110,5,
        105,0,0,110,111,5,110,0,0,111,112,5,116,0,0,112,4,1,0,0,0,113,114,
        5,110,0,0,114,115,5,117,0,0,115,116,5,109,0,0,116,117,5,98,0,0,117,
        118,5,101,0,0,118,119,5,114,0,0,119,6,1,0,0,0,120,121,5,116,0,0,
        121,122,5,105,0,0,122,123,5,108,0,0,123,124,5,101,0,0,124,8,1,0,
        0,0,125,126,5,98,0,0,126,127,5,108,0,0,127,128,5,101,0,0,128,129,
        5,110,0,0,129,130,5,100,0,0,130,10,1,0,0,0,131,132,5,102,0,0,132,
        133,5,117,0,0,133,134,5,110,0,0,134,135,5,99,0,0,135,136,5,116,0,
        0,136,137,5,105,0,0,137,138,5,111,0,0,138,139,5,110,0,0,139,12,1,
        0,0,0,140,141,5,40,0,0,141,14,1,0,0,0,142,143,5,44,0,0,143,16,1,
        0,0,0,144,145,5,41,0,0,145,18,1,0,0,0,146,147,5,123,0,0,147,20,1,
        0,0,0,148,149,5,125,0,0,149,22,1,0,0,0,150,151,5,43,0,0,151,152,
        5,43,0,0,152,24,1,0,0,0,153,154,5,45,0,0,154,155,5,45,0,0,155,26,
        1,0,0,0,156,157,5,43,0,0,157,158,5,61,0,0,158,28,1,0,0,0,159,160,
        5,45,0,0,160,161,5,61,0,0,161,30,1,0,0,0,162,163,5,61,0,0,163,32,
        1,0,0,0,164,165,5,43,0,0,165,34,1,0,0,0,166,167,5,98,0,0,167,168,
        5,111,0,0,168,169,5,111,0,0,169,170,5,108,0,0,170,36,1,0,0,0,171,
        172,5,114,0,0,172,173,5,111,0,0,173,174,5,97,0,0,174,175,5,100,0,
        0,175,38,1,0,0,0,176,177,5,115,0,0,177,178,5,116,0,0,178,179,5,97,
        0,0,179,180,5,114,0,0,180,181,5,116,0,0,181,40,1,0,0,0,182,183,5,
        101,0,0,183,184,5,110,0,0,184,185,5,100,0,0,185,42,1,0,0,0,186,187,
        5,99,0,0,187,188,5,105,0,0,188,189,5,114,0,0,189,190,5,99,0,0,190,
        191,5,108,0,0,191,192,5,101,0,0,192,44,1,0,0,0,193,194,5,114,0,0,
        194,195,5,101,0,0,195,196,5,99,0,0,196,197,5,116,0,0,197,198,5,97,
        0,0,198,199,5,110,0,0,199,200,5,103,0,0,200,201,5,108,0,0,201,202,
        5,101,0,0,202,46,1,0,0,0,203,204,5,37,0,0,204,48,1,0,0,0,205,206,
        5,100,0,0,206,207,5,114,0,0,207,208,5,97,0,0,208,209,5,119,0,0,209,
        210,5,82,0,0,210,211,5,111,0,0,211,212,5,97,0,0,212,213,5,100,0,
        0,213,50,1,0,0,0,214,215,5,100,0,0,215,216,5,114,0,0,216,217,5,97,
        0,0,217,218,5,119,0,0,218,52,1,0,0,0,219,220,5,114,0,0,220,221,5,
        97,0,0,221,222,5,100,0,0,222,223,5,105,0,0,223,224,5,117,0,0,224,
        225,5,115,0,0,225,54,1,0,0,0,226,227,5,112,0,0,227,228,5,111,0,0,
        228,229,5,105,0,0,229,230,5,110,0,0,230,231,5,116,0,0,231,232,5,
        101,0,0,232,233,5,114,0,0,233,56,1,0,0,0,234,235,5,117,0,0,235,236,
        5,112,0,0,236,58,1,0,0,0,237,238,5,100,0,0,238,239,5,111,0,0,239,
        240,5,119,0,0,240,241,5,110,0,0,241,60,1,0,0,0,242,243,5,108,0,0,
        243,244,5,101,0,0,244,245,5,102,0,0,245,246,5,116,0,0,246,62,1,0,
        0,0,247,248,5,114,0,0,248,249,5,105,0,0,249,250,5,103,0,0,250,251,
        5,104,0,0,251,252,5,116,0,0,252,64,1,0,0,0,253,254,5,119,0,0,254,
        255,5,104,0,0,255,256,5,105,0,0,256,257,5,108,0,0,257,258,5,101,
        0,0,258,66,1,0,0,0,259,260,5,102,0,0,260,261,5,111,0,0,261,262,5,
        114,0,0,262,68,1,0,0,0,263,264,5,105,0,0,264,265,5,102,0,0,265,70,
        1,0,0,0,266,267,5,101,0,0,267,268,5,108,0,0,268,269,5,115,0,0,269,
        270,5,101,0,0,270,72,1,0,0,0,271,272,5,42,0,0,272,74,1,0,0,0,273,
        274,5,47,0,0,274,76,1,0,0,0,275,276,5,45,0,0,276,78,1,0,0,0,277,
        278,5,61,0,0,278,279,5,61,0,0,279,80,1,0,0,0,280,281,5,33,0,0,281,
        282,5,61,0,0,282,82,1,0,0,0,283,284,5,62,0,0,284,84,1,0,0,0,285,
        286,5,60,0,0,286,86,1,0,0,0,287,288,5,62,0,0,288,289,5,61,0,0,289,
        88,1,0,0,0,290,291,5,60,0,0,291,292,5,61,0,0,292,90,1,0,0,0,293,
        297,7,0,0,0,294,296,7,1,0,0,295,294,1,0,0,0,296,299,1,0,0,0,297,
        295,1,0,0,0,297,298,1,0,0,0,298,92,1,0,0,0,299,297,1,0,0,0,300,302,
        7,2,0,0,301,300,1,0,0,0,302,303,1,0,0,0,303,301,1,0,0,0,303,304,
        1,0,0,0,304,94,1,0,0,0,305,306,5,116,0,0,306,307,5,114,0,0,307,308,
        5,117,0,0,308,315,5,101,0,0,309,310,5,102,0,0,310,311,5,97,0,0,311,
        312,5,108,0,0,312,313,5,115,0,0,313,315,5,101,0,0,314,305,1,0,0,
        0,314,309,1,0,0,0,315,96,1,0,0,0,316,320,5,34,0,0,317,319,9,0,0,
        0,318,317,1,0,0,0,319,322,1,0,0,0,320,321,1,0,0,0,320,318,1,0,0,
        0,321,323,1,0,0,0,322,320,1,0,0,0,323,324,5,34,0,0,324,98,1,0,0,
        0,325,327,7,3,0,0,326,325,1,0,0,0,327,328,1,0,0,0,328,326,1,0,0,
        0,328,329,1,0,0,0,329,330,1,0,0,0,330,331,6,49,0,0,331,100,1,0,0,
        0,332,333,5,46,0,0,333,102,1,0,0,0,334,335,5,89,0,0,335,336,5,65,
        0,0,336,337,5,80,0,0,337,338,5,80,0,0,338,339,5,73,0,0,339,340,5,
        78,0,0,340,341,5,71,0,0,341,104,1,0,0,0,6,0,297,303,314,320,328,
        1,6,0,0
    ]

class MapperLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    T__40 = 41
    T__41 = 42
    T__42 = 43
    T__43 = 44
    T__44 = 45
    IDENTIFIER = 46
    INT = 47
    BOOL = 48
    STRING = 49
    WS = 50
    DOT = 51
    ERROR = 52

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'print'", "'number'", "'tile'", "'blend'", "'function'", 
            "'('", "','", "')'", "'{'", "'}'", "'++'", "'--'", "'+='", "'-='", 
            "'='", "'+'", "'bool'", "'road'", "'start'", "'end'", "'circle'", 
            "'rectangle'", "'%'", "'drawRoad'", "'draw'", "'radius'", "'pointer'", 
            "'up'", "'down'", "'left'", "'right'", "'while'", "'for'", "'if'", 
            "'else'", "'*'", "'/'", "'-'", "'=='", "'!='", "'>'", "'<'", 
            "'>='", "'<='", "'.'", "'YAPPING'" ]

    symbolicNames = [ "<INVALID>",
            "IDENTIFIER", "INT", "BOOL", "STRING", "WS", "DOT", "ERROR" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "T__39", "T__40", "T__41", "T__42", "T__43", 
                  "T__44", "IDENTIFIER", "INT", "BOOL", "STRING", "WS", 
                  "DOT", "ERROR" ]

    grammarFileName = "Mapper.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


